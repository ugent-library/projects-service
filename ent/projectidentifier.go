// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ugent-library/projects/ent/projectidentifier"
)

// ProjectIdentifier is the model entity for the ProjectIdentifier schema.
type ProjectIdentifier struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ExternalID holds the value of the "external_id" field.
	ExternalID string `json:"external_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectIdentifierQuery when eager-loading is set.
	Edges        ProjectIdentifierEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectIdentifierEdges holds the relations/edges for other nodes in the graph.
type ProjectIdentifierEdges struct {
	// Projects holds the value of the projects edge.
	Projects []*Project `json:"projects,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectsOrErr returns the Projects value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectIdentifierEdges) ProjectsOrErr() ([]*Project, error) {
	if e.loadedTypes[0] {
		return e.Projects, nil
	}
	return nil, &NotLoadedError{edge: "projects"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectIdentifier) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectidentifier.FieldID:
			values[i] = new(sql.NullInt64)
		case projectidentifier.FieldExternalID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectIdentifier fields.
func (pi *ProjectIdentifier) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectidentifier.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case projectidentifier.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_id", values[i])
			} else if value.Valid {
				pi.ExternalID = value.String
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectIdentifier.
// This includes values selected through modifiers, order, etc.
func (pi *ProjectIdentifier) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryProjects queries the "projects" edge of the ProjectIdentifier entity.
func (pi *ProjectIdentifier) QueryProjects() *ProjectQuery {
	return NewProjectIdentifierClient(pi.config).QueryProjects(pi)
}

// Update returns a builder for updating this ProjectIdentifier.
// Note that you need to call ProjectIdentifier.Unwrap() before calling this method if this ProjectIdentifier
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProjectIdentifier) Update() *ProjectIdentifierUpdateOne {
	return NewProjectIdentifierClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProjectIdentifier entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProjectIdentifier) Unwrap() *ProjectIdentifier {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectIdentifier is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProjectIdentifier) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectIdentifier(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("external_id=")
	builder.WriteString(pi.ExternalID)
	builder.WriteByte(')')
	return builder.String()
}

// ProjectIdentifiers is a parsable slice of ProjectIdentifier.
type ProjectIdentifiers []*ProjectIdentifier
