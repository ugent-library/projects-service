// Code generated by ent, DO NOT EDIT.

package project

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ugent-library/projects/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldID, id))
}

// GismoID applies equality check predicate on the "gismo_id" field. It's identical to GismoIDEQ.
func GismoID(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGismoID, v))
}

// FoundingDate applies equality check predicate on the "founding_date" field. It's identical to FoundingDateEQ.
func FoundingDate(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldFoundingDate, v))
}

// DissolutionDate applies equality check predicate on the "dissolution_date" field. It's identical to DissolutionDateEQ.
func DissolutionDate(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDissolutionDate, v))
}

// Acronym applies equality check predicate on the "acronym" field. It's identical to AcronymEQ.
func Acronym(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAcronym, v))
}

// GrantID applies equality check predicate on the "grant_id" field. It's identical to GrantIDEQ.
func GrantID(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGrantID, v))
}

// FundingProgramme applies equality check predicate on the "funding_programme" field. It's identical to FundingProgrammeEQ.
func FundingProgramme(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldFundingProgramme, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDeleted, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// Ts applies equality check predicate on the "ts" field. It's identical to TsEQ.
func Ts(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldTs, v))
}

// GismoIDEQ applies the EQ predicate on the "gismo_id" field.
func GismoIDEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGismoID, v))
}

// GismoIDNEQ applies the NEQ predicate on the "gismo_id" field.
func GismoIDNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldGismoID, v))
}

// GismoIDIn applies the In predicate on the "gismo_id" field.
func GismoIDIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldGismoID, vs...))
}

// GismoIDNotIn applies the NotIn predicate on the "gismo_id" field.
func GismoIDNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldGismoID, vs...))
}

// GismoIDGT applies the GT predicate on the "gismo_id" field.
func GismoIDGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldGismoID, v))
}

// GismoIDGTE applies the GTE predicate on the "gismo_id" field.
func GismoIDGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldGismoID, v))
}

// GismoIDLT applies the LT predicate on the "gismo_id" field.
func GismoIDLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldGismoID, v))
}

// GismoIDLTE applies the LTE predicate on the "gismo_id" field.
func GismoIDLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldGismoID, v))
}

// GismoIDContains applies the Contains predicate on the "gismo_id" field.
func GismoIDContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldGismoID, v))
}

// GismoIDHasPrefix applies the HasPrefix predicate on the "gismo_id" field.
func GismoIDHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldGismoID, v))
}

// GismoIDHasSuffix applies the HasSuffix predicate on the "gismo_id" field.
func GismoIDHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldGismoID, v))
}

// GismoIDEqualFold applies the EqualFold predicate on the "gismo_id" field.
func GismoIDEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldGismoID, v))
}

// GismoIDContainsFold applies the ContainsFold predicate on the "gismo_id" field.
func GismoIDContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldGismoID, v))
}

// FoundingDateEQ applies the EQ predicate on the "founding_date" field.
func FoundingDateEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldFoundingDate, v))
}

// FoundingDateNEQ applies the NEQ predicate on the "founding_date" field.
func FoundingDateNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldFoundingDate, v))
}

// FoundingDateIn applies the In predicate on the "founding_date" field.
func FoundingDateIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldFoundingDate, vs...))
}

// FoundingDateNotIn applies the NotIn predicate on the "founding_date" field.
func FoundingDateNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldFoundingDate, vs...))
}

// FoundingDateGT applies the GT predicate on the "founding_date" field.
func FoundingDateGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldFoundingDate, v))
}

// FoundingDateGTE applies the GTE predicate on the "founding_date" field.
func FoundingDateGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldFoundingDate, v))
}

// FoundingDateLT applies the LT predicate on the "founding_date" field.
func FoundingDateLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldFoundingDate, v))
}

// FoundingDateLTE applies the LTE predicate on the "founding_date" field.
func FoundingDateLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldFoundingDate, v))
}

// FoundingDateContains applies the Contains predicate on the "founding_date" field.
func FoundingDateContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldFoundingDate, v))
}

// FoundingDateHasPrefix applies the HasPrefix predicate on the "founding_date" field.
func FoundingDateHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldFoundingDate, v))
}

// FoundingDateHasSuffix applies the HasSuffix predicate on the "founding_date" field.
func FoundingDateHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldFoundingDate, v))
}

// FoundingDateIsNil applies the IsNil predicate on the "founding_date" field.
func FoundingDateIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldFoundingDate))
}

// FoundingDateNotNil applies the NotNil predicate on the "founding_date" field.
func FoundingDateNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldFoundingDate))
}

// FoundingDateEqualFold applies the EqualFold predicate on the "founding_date" field.
func FoundingDateEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldFoundingDate, v))
}

// FoundingDateContainsFold applies the ContainsFold predicate on the "founding_date" field.
func FoundingDateContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldFoundingDate, v))
}

// DissolutionDateEQ applies the EQ predicate on the "dissolution_date" field.
func DissolutionDateEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDissolutionDate, v))
}

// DissolutionDateNEQ applies the NEQ predicate on the "dissolution_date" field.
func DissolutionDateNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDissolutionDate, v))
}

// DissolutionDateIn applies the In predicate on the "dissolution_date" field.
func DissolutionDateIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDissolutionDate, vs...))
}

// DissolutionDateNotIn applies the NotIn predicate on the "dissolution_date" field.
func DissolutionDateNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDissolutionDate, vs...))
}

// DissolutionDateGT applies the GT predicate on the "dissolution_date" field.
func DissolutionDateGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDissolutionDate, v))
}

// DissolutionDateGTE applies the GTE predicate on the "dissolution_date" field.
func DissolutionDateGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDissolutionDate, v))
}

// DissolutionDateLT applies the LT predicate on the "dissolution_date" field.
func DissolutionDateLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDissolutionDate, v))
}

// DissolutionDateLTE applies the LTE predicate on the "dissolution_date" field.
func DissolutionDateLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDissolutionDate, v))
}

// DissolutionDateContains applies the Contains predicate on the "dissolution_date" field.
func DissolutionDateContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDissolutionDate, v))
}

// DissolutionDateHasPrefix applies the HasPrefix predicate on the "dissolution_date" field.
func DissolutionDateHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDissolutionDate, v))
}

// DissolutionDateHasSuffix applies the HasSuffix predicate on the "dissolution_date" field.
func DissolutionDateHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDissolutionDate, v))
}

// DissolutionDateIsNil applies the IsNil predicate on the "dissolution_date" field.
func DissolutionDateIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldDissolutionDate))
}

// DissolutionDateNotNil applies the NotNil predicate on the "dissolution_date" field.
func DissolutionDateNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldDissolutionDate))
}

// DissolutionDateEqualFold applies the EqualFold predicate on the "dissolution_date" field.
func DissolutionDateEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDissolutionDate, v))
}

// DissolutionDateContainsFold applies the ContainsFold predicate on the "dissolution_date" field.
func DissolutionDateContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDissolutionDate, v))
}

// AcronymEQ applies the EQ predicate on the "acronym" field.
func AcronymEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldAcronym, v))
}

// AcronymNEQ applies the NEQ predicate on the "acronym" field.
func AcronymNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldAcronym, v))
}

// AcronymIn applies the In predicate on the "acronym" field.
func AcronymIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldAcronym, vs...))
}

// AcronymNotIn applies the NotIn predicate on the "acronym" field.
func AcronymNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldAcronym, vs...))
}

// AcronymGT applies the GT predicate on the "acronym" field.
func AcronymGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldAcronym, v))
}

// AcronymGTE applies the GTE predicate on the "acronym" field.
func AcronymGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldAcronym, v))
}

// AcronymLT applies the LT predicate on the "acronym" field.
func AcronymLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldAcronym, v))
}

// AcronymLTE applies the LTE predicate on the "acronym" field.
func AcronymLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldAcronym, v))
}

// AcronymContains applies the Contains predicate on the "acronym" field.
func AcronymContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldAcronym, v))
}

// AcronymHasPrefix applies the HasPrefix predicate on the "acronym" field.
func AcronymHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldAcronym, v))
}

// AcronymHasSuffix applies the HasSuffix predicate on the "acronym" field.
func AcronymHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldAcronym, v))
}

// AcronymIsNil applies the IsNil predicate on the "acronym" field.
func AcronymIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldAcronym))
}

// AcronymNotNil applies the NotNil predicate on the "acronym" field.
func AcronymNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldAcronym))
}

// AcronymEqualFold applies the EqualFold predicate on the "acronym" field.
func AcronymEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldAcronym, v))
}

// AcronymContainsFold applies the ContainsFold predicate on the "acronym" field.
func AcronymContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldAcronym, v))
}

// GrantIDEQ applies the EQ predicate on the "grant_id" field.
func GrantIDEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldGrantID, v))
}

// GrantIDNEQ applies the NEQ predicate on the "grant_id" field.
func GrantIDNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldGrantID, v))
}

// GrantIDIn applies the In predicate on the "grant_id" field.
func GrantIDIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldGrantID, vs...))
}

// GrantIDNotIn applies the NotIn predicate on the "grant_id" field.
func GrantIDNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldGrantID, vs...))
}

// GrantIDGT applies the GT predicate on the "grant_id" field.
func GrantIDGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldGrantID, v))
}

// GrantIDGTE applies the GTE predicate on the "grant_id" field.
func GrantIDGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldGrantID, v))
}

// GrantIDLT applies the LT predicate on the "grant_id" field.
func GrantIDLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldGrantID, v))
}

// GrantIDLTE applies the LTE predicate on the "grant_id" field.
func GrantIDLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldGrantID, v))
}

// GrantIDContains applies the Contains predicate on the "grant_id" field.
func GrantIDContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldGrantID, v))
}

// GrantIDHasPrefix applies the HasPrefix predicate on the "grant_id" field.
func GrantIDHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldGrantID, v))
}

// GrantIDHasSuffix applies the HasSuffix predicate on the "grant_id" field.
func GrantIDHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldGrantID, v))
}

// GrantIDIsNil applies the IsNil predicate on the "grant_id" field.
func GrantIDIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldGrantID))
}

// GrantIDNotNil applies the NotNil predicate on the "grant_id" field.
func GrantIDNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldGrantID))
}

// GrantIDEqualFold applies the EqualFold predicate on the "grant_id" field.
func GrantIDEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldGrantID, v))
}

// GrantIDContainsFold applies the ContainsFold predicate on the "grant_id" field.
func GrantIDContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldGrantID, v))
}

// FundingProgrammeEQ applies the EQ predicate on the "funding_programme" field.
func FundingProgrammeEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldFundingProgramme, v))
}

// FundingProgrammeNEQ applies the NEQ predicate on the "funding_programme" field.
func FundingProgrammeNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldFundingProgramme, v))
}

// FundingProgrammeIn applies the In predicate on the "funding_programme" field.
func FundingProgrammeIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldFundingProgramme, vs...))
}

// FundingProgrammeNotIn applies the NotIn predicate on the "funding_programme" field.
func FundingProgrammeNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldFundingProgramme, vs...))
}

// FundingProgrammeGT applies the GT predicate on the "funding_programme" field.
func FundingProgrammeGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldFundingProgramme, v))
}

// FundingProgrammeGTE applies the GTE predicate on the "funding_programme" field.
func FundingProgrammeGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldFundingProgramme, v))
}

// FundingProgrammeLT applies the LT predicate on the "funding_programme" field.
func FundingProgrammeLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldFundingProgramme, v))
}

// FundingProgrammeLTE applies the LTE predicate on the "funding_programme" field.
func FundingProgrammeLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldFundingProgramme, v))
}

// FundingProgrammeContains applies the Contains predicate on the "funding_programme" field.
func FundingProgrammeContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldFundingProgramme, v))
}

// FundingProgrammeHasPrefix applies the HasPrefix predicate on the "funding_programme" field.
func FundingProgrammeHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldFundingProgramme, v))
}

// FundingProgrammeHasSuffix applies the HasSuffix predicate on the "funding_programme" field.
func FundingProgrammeHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldFundingProgramme, v))
}

// FundingProgrammeIsNil applies the IsNil predicate on the "funding_programme" field.
func FundingProgrammeIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldFundingProgramme))
}

// FundingProgrammeNotNil applies the NotNil predicate on the "funding_programme" field.
func FundingProgrammeNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldFundingProgramme))
}

// FundingProgrammeEqualFold applies the EqualFold predicate on the "funding_programme" field.
func FundingProgrammeEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldFundingProgramme, v))
}

// FundingProgrammeContainsFold applies the ContainsFold predicate on the "funding_programme" field.
func FundingProgrammeContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldFundingProgramme, v))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDeleted, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUpdatedAt, v))
}

// TsEQ applies the EQ predicate on the "ts" field.
func TsEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldTs, v))
}

// TsNEQ applies the NEQ predicate on the "ts" field.
func TsNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldTs, v))
}

// TsIn applies the In predicate on the "ts" field.
func TsIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldTs, vs...))
}

// TsNotIn applies the NotIn predicate on the "ts" field.
func TsNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldTs, vs...))
}

// TsGT applies the GT predicate on the "ts" field.
func TsGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldTs, v))
}

// TsGTE applies the GTE predicate on the "ts" field.
func TsGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldTs, v))
}

// TsLT applies the LT predicate on the "ts" field.
func TsLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldTs, v))
}

// TsLTE applies the LTE predicate on the "ts" field.
func TsLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldTs, v))
}

// TsContains applies the Contains predicate on the "ts" field.
func TsContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldTs, v))
}

// TsHasPrefix applies the HasPrefix predicate on the "ts" field.
func TsHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldTs, v))
}

// TsHasSuffix applies the HasSuffix predicate on the "ts" field.
func TsHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldTs, v))
}

// TsIsNil applies the IsNil predicate on the "ts" field.
func TsIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldTs))
}

// TsNotNil applies the NotNil predicate on the "ts" field.
func TsNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldTs))
}

// TsEqualFold applies the EqualFold predicate on the "ts" field.
func TsEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldTs, v))
}

// TsContainsFold applies the ContainsFold predicate on the "ts" field.
func TsContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldTs, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		p(s.Not())
	})
}
