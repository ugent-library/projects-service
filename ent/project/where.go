// Code generated by ent, DO NOT EDIT.

package project

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ugent-library/projects/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// FoundingDate applies equality check predicate on the "founding_date" field. It's identical to FoundingDateEQ.
func FoundingDate(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldFoundingDate, v))
}

// DissolutionDate applies equality check predicate on the "dissolution_date" field. It's identical to DissolutionDateEQ.
func DissolutionDate(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDissolutionDate, v))
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreated, v))
}

// Modified applies equality check predicate on the "modified" field. It's identical to ModifiedEQ.
func Modified(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldModified, v))
}

// IdentifierIsNil applies the IsNil predicate on the "identifier" field.
func IdentifierIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldIdentifier))
}

// IdentifierNotNil applies the NotNil predicate on the "identifier" field.
func IdentifierNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldIdentifier))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDescription, v))
}

// FoundingDateEQ applies the EQ predicate on the "founding_date" field.
func FoundingDateEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldFoundingDate, v))
}

// FoundingDateNEQ applies the NEQ predicate on the "founding_date" field.
func FoundingDateNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldFoundingDate, v))
}

// FoundingDateIn applies the In predicate on the "founding_date" field.
func FoundingDateIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldFoundingDate, vs...))
}

// FoundingDateNotIn applies the NotIn predicate on the "founding_date" field.
func FoundingDateNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldFoundingDate, vs...))
}

// FoundingDateGT applies the GT predicate on the "founding_date" field.
func FoundingDateGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldFoundingDate, v))
}

// FoundingDateGTE applies the GTE predicate on the "founding_date" field.
func FoundingDateGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldFoundingDate, v))
}

// FoundingDateLT applies the LT predicate on the "founding_date" field.
func FoundingDateLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldFoundingDate, v))
}

// FoundingDateLTE applies the LTE predicate on the "founding_date" field.
func FoundingDateLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldFoundingDate, v))
}

// FoundingDateContains applies the Contains predicate on the "founding_date" field.
func FoundingDateContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldFoundingDate, v))
}

// FoundingDateHasPrefix applies the HasPrefix predicate on the "founding_date" field.
func FoundingDateHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldFoundingDate, v))
}

// FoundingDateHasSuffix applies the HasSuffix predicate on the "founding_date" field.
func FoundingDateHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldFoundingDate, v))
}

// FoundingDateEqualFold applies the EqualFold predicate on the "founding_date" field.
func FoundingDateEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldFoundingDate, v))
}

// FoundingDateContainsFold applies the ContainsFold predicate on the "founding_date" field.
func FoundingDateContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldFoundingDate, v))
}

// DissolutionDateEQ applies the EQ predicate on the "dissolution_date" field.
func DissolutionDateEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDissolutionDate, v))
}

// DissolutionDateNEQ applies the NEQ predicate on the "dissolution_date" field.
func DissolutionDateNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDissolutionDate, v))
}

// DissolutionDateIn applies the In predicate on the "dissolution_date" field.
func DissolutionDateIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDissolutionDate, vs...))
}

// DissolutionDateNotIn applies the NotIn predicate on the "dissolution_date" field.
func DissolutionDateNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDissolutionDate, vs...))
}

// DissolutionDateGT applies the GT predicate on the "dissolution_date" field.
func DissolutionDateGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDissolutionDate, v))
}

// DissolutionDateGTE applies the GTE predicate on the "dissolution_date" field.
func DissolutionDateGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDissolutionDate, v))
}

// DissolutionDateLT applies the LT predicate on the "dissolution_date" field.
func DissolutionDateLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDissolutionDate, v))
}

// DissolutionDateLTE applies the LTE predicate on the "dissolution_date" field.
func DissolutionDateLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDissolutionDate, v))
}

// DissolutionDateContains applies the Contains predicate on the "dissolution_date" field.
func DissolutionDateContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDissolutionDate, v))
}

// DissolutionDateHasPrefix applies the HasPrefix predicate on the "dissolution_date" field.
func DissolutionDateHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDissolutionDate, v))
}

// DissolutionDateHasSuffix applies the HasSuffix predicate on the "dissolution_date" field.
func DissolutionDateHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDissolutionDate, v))
}

// DissolutionDateEqualFold applies the EqualFold predicate on the "dissolution_date" field.
func DissolutionDateEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDissolutionDate, v))
}

// DissolutionDateContainsFold applies the ContainsFold predicate on the "dissolution_date" field.
func DissolutionDateContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDissolutionDate, v))
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreated, v))
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreated, v))
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreated, vs...))
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreated, vs...))
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreated, v))
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreated, v))
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreated, v))
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreated, v))
}

// ModifiedEQ applies the EQ predicate on the "modified" field.
func ModifiedEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldModified, v))
}

// ModifiedNEQ applies the NEQ predicate on the "modified" field.
func ModifiedNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldModified, v))
}

// ModifiedIn applies the In predicate on the "modified" field.
func ModifiedIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldModified, vs...))
}

// ModifiedNotIn applies the NotIn predicate on the "modified" field.
func ModifiedNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldModified, vs...))
}

// ModifiedGT applies the GT predicate on the "modified" field.
func ModifiedGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldModified, v))
}

// ModifiedGTE applies the GTE predicate on the "modified" field.
func ModifiedGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldModified, v))
}

// ModifiedLT applies the LT predicate on the "modified" field.
func ModifiedLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldModified, v))
}

// ModifiedLTE applies the LTE predicate on the "modified" field.
func ModifiedLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldModified, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		p(s.Not())
	})
}
