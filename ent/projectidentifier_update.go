// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/projects/ent/predicate"
	"github.com/ugent-library/projects/ent/project"
	"github.com/ugent-library/projects/ent/projectidentifier"
)

// ProjectIdentifierUpdate is the builder for updating ProjectIdentifier entities.
type ProjectIdentifierUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectIdentifierMutation
}

// Where appends a list predicates to the ProjectIdentifierUpdate builder.
func (piu *ProjectIdentifierUpdate) Where(ps ...predicate.ProjectIdentifier) *ProjectIdentifierUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetExternalID sets the "external_id" field.
func (piu *ProjectIdentifierUpdate) SetExternalID(s string) *ProjectIdentifierUpdate {
	piu.mutation.SetExternalID(s)
	return piu
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (piu *ProjectIdentifierUpdate) AddProjectIDs(ids ...int) *ProjectIdentifierUpdate {
	piu.mutation.AddProjectIDs(ids...)
	return piu
}

// AddProjects adds the "projects" edges to the Project entity.
func (piu *ProjectIdentifierUpdate) AddProjects(p ...*Project) *ProjectIdentifierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.AddProjectIDs(ids...)
}

// Mutation returns the ProjectIdentifierMutation object of the builder.
func (piu *ProjectIdentifierUpdate) Mutation() *ProjectIdentifierMutation {
	return piu.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (piu *ProjectIdentifierUpdate) ClearProjects() *ProjectIdentifierUpdate {
	piu.mutation.ClearProjects()
	return piu
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (piu *ProjectIdentifierUpdate) RemoveProjectIDs(ids ...int) *ProjectIdentifierUpdate {
	piu.mutation.RemoveProjectIDs(ids...)
	return piu
}

// RemoveProjects removes "projects" edges to Project entities.
func (piu *ProjectIdentifierUpdate) RemoveProjects(p ...*Project) *ProjectIdentifierUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.RemoveProjectIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProjectIdentifierUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProjectIdentifierUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProjectIdentifierUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProjectIdentifierUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piu *ProjectIdentifierUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(projectidentifier.Table, projectidentifier.Columns, sqlgraph.NewFieldSpec(projectidentifier.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.ExternalID(); ok {
		_spec.SetField(projectidentifier.FieldExternalID, field.TypeString, value)
	}
	if piu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectidentifier.ProjectsTable,
			Columns: []string{projectidentifier.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !piu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectidentifier.ProjectsTable,
			Columns: []string{projectidentifier.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectidentifier.ProjectsTable,
			Columns: []string{projectidentifier.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectidentifier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProjectIdentifierUpdateOne is the builder for updating a single ProjectIdentifier entity.
type ProjectIdentifierUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectIdentifierMutation
}

// SetExternalID sets the "external_id" field.
func (piuo *ProjectIdentifierUpdateOne) SetExternalID(s string) *ProjectIdentifierUpdateOne {
	piuo.mutation.SetExternalID(s)
	return piuo
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (piuo *ProjectIdentifierUpdateOne) AddProjectIDs(ids ...int) *ProjectIdentifierUpdateOne {
	piuo.mutation.AddProjectIDs(ids...)
	return piuo
}

// AddProjects adds the "projects" edges to the Project entity.
func (piuo *ProjectIdentifierUpdateOne) AddProjects(p ...*Project) *ProjectIdentifierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.AddProjectIDs(ids...)
}

// Mutation returns the ProjectIdentifierMutation object of the builder.
func (piuo *ProjectIdentifierUpdateOne) Mutation() *ProjectIdentifierMutation {
	return piuo.mutation
}

// ClearProjects clears all "projects" edges to the Project entity.
func (piuo *ProjectIdentifierUpdateOne) ClearProjects() *ProjectIdentifierUpdateOne {
	piuo.mutation.ClearProjects()
	return piuo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (piuo *ProjectIdentifierUpdateOne) RemoveProjectIDs(ids ...int) *ProjectIdentifierUpdateOne {
	piuo.mutation.RemoveProjectIDs(ids...)
	return piuo
}

// RemoveProjects removes "projects" edges to Project entities.
func (piuo *ProjectIdentifierUpdateOne) RemoveProjects(p ...*Project) *ProjectIdentifierUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.RemoveProjectIDs(ids...)
}

// Where appends a list predicates to the ProjectIdentifierUpdate builder.
func (piuo *ProjectIdentifierUpdateOne) Where(ps ...predicate.ProjectIdentifier) *ProjectIdentifierUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProjectIdentifierUpdateOne) Select(field string, fields ...string) *ProjectIdentifierUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProjectIdentifier entity.
func (piuo *ProjectIdentifierUpdateOne) Save(ctx context.Context) (*ProjectIdentifier, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProjectIdentifierUpdateOne) SaveX(ctx context.Context) *ProjectIdentifier {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProjectIdentifierUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProjectIdentifierUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piuo *ProjectIdentifierUpdateOne) sqlSave(ctx context.Context) (_node *ProjectIdentifier, err error) {
	_spec := sqlgraph.NewUpdateSpec(projectidentifier.Table, projectidentifier.Columns, sqlgraph.NewFieldSpec(projectidentifier.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectIdentifier.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectidentifier.FieldID)
		for _, f := range fields {
			if !projectidentifier.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectidentifier.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.ExternalID(); ok {
		_spec.SetField(projectidentifier.FieldExternalID, field.TypeString, value)
	}
	if piuo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectidentifier.ProjectsTable,
			Columns: []string{projectidentifier.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !piuo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectidentifier.ProjectsTable,
			Columns: []string{projectidentifier.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectidentifier.ProjectsTable,
			Columns: []string{projectidentifier.ProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectIdentifier{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectidentifier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
