// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ugent-library/projects/ent/project"
	"github.com/ugent-library/projects/ent/schema"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIdentifier sets the "identifier" field.
func (pc *ProjectCreate) SetIdentifier(s []schema.Identifier) *ProjectCreate {
	pc.mutation.SetIdentifier(s)
	return pc
}

// SetIsFundedBy sets the "is_funded_by" field.
func (pc *ProjectCreate) SetIsFundedBy(s schema.Grant) *ProjectCreate {
	pc.mutation.SetIsFundedBy(s)
	return pc
}

// SetNillableIsFundedBy sets the "is_funded_by" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableIsFundedBy(s *schema.Grant) *ProjectCreate {
	if s != nil {
		pc.SetIsFundedBy(*s)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ProjectCreate) SetName(s string) *ProjectCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProjectCreate) SetDescription(s string) *ProjectCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetFoundingDate sets the "founding_date" field.
func (pc *ProjectCreate) SetFoundingDate(s string) *ProjectCreate {
	pc.mutation.SetFoundingDate(s)
	return pc
}

// SetDissolutionDate sets the "dissolution_date" field.
func (pc *ProjectCreate) SetDissolutionDate(s string) *ProjectCreate {
	pc.mutation.SetDissolutionDate(s)
	return pc
}

// SetHasAcronym sets the "has_acronym" field.
func (pc *ProjectCreate) SetHasAcronym(s string) *ProjectCreate {
	pc.mutation.SetHasAcronym(s)
	return pc
}

// SetCreated sets the "created" field.
func (pc *ProjectCreate) SetCreated(t time.Time) *ProjectCreate {
	pc.mutation.SetCreated(t)
	return pc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableCreated(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetCreated(*t)
	}
	return pc
}

// SetModified sets the "modified" field.
func (pc *ProjectCreate) SetModified(t time.Time) *ProjectCreate {
	pc.mutation.SetModified(t)
	return pc
}

// SetNillableModified sets the "modified" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableModified(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetModified(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProjectCreate) SetID(s string) *ProjectCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableID(s *string) *ProjectCreate {
	if s != nil {
		pc.SetID(*s)
	}
	return pc
}

// Mutation returns the ProjectMutation object of the builder.
func (pc *ProjectCreate) Mutation() *ProjectMutation {
	return pc.mutation
}

// Save creates the Project in the database.
func (pc *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProjectCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProjectCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProjectCreate) defaults() {
	if _, ok := pc.mutation.Identifier(); !ok {
		v := project.DefaultIdentifier
		pc.mutation.SetIdentifier(v)
	}
	if _, ok := pc.mutation.IsFundedBy(); !ok {
		v := project.DefaultIsFundedBy
		pc.mutation.SetIsFundedBy(v)
	}
	if _, ok := pc.mutation.Created(); !ok {
		v := project.DefaultCreated()
		pc.mutation.SetCreated(v)
	}
	if _, ok := pc.mutation.Modified(); !ok {
		v := project.DefaultModified()
		pc.mutation.SetModified(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := project.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProjectCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Project.name"`)}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Project.description"`)}
	}
	if _, ok := pc.mutation.FoundingDate(); !ok {
		return &ValidationError{Name: "founding_date", err: errors.New(`ent: missing required field "Project.founding_date"`)}
	}
	if _, ok := pc.mutation.DissolutionDate(); !ok {
		return &ValidationError{Name: "dissolution_date", err: errors.New(`ent: missing required field "Project.dissolution_date"`)}
	}
	if _, ok := pc.mutation.HasAcronym(); !ok {
		return &ValidationError{Name: "has_acronym", err: errors.New(`ent: missing required field "Project.has_acronym"`)}
	}
	if _, ok := pc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "Project.created"`)}
	}
	if _, ok := pc.mutation.Modified(); !ok {
		return &ValidationError{Name: "modified", err: errors.New(`ent: missing required field "Project.modified"`)}
	}
	return nil
}

func (pc *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Project.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProjectCreate) createSpec() (*Project, *sqlgraph.CreateSpec) {
	var (
		_node = &Project{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(project.Table, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Identifier(); ok {
		_spec.SetField(project.FieldIdentifier, field.TypeJSON, value)
		_node.Identifier = value
	}
	if value, ok := pc.mutation.IsFundedBy(); ok {
		_spec.SetField(project.FieldIsFundedBy, field.TypeJSON, value)
		_node.IsFundedBy = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.FoundingDate(); ok {
		_spec.SetField(project.FieldFoundingDate, field.TypeString, value)
		_node.FoundingDate = value
	}
	if value, ok := pc.mutation.DissolutionDate(); ok {
		_spec.SetField(project.FieldDissolutionDate, field.TypeString, value)
		_node.DissolutionDate = value
	}
	if value, ok := pc.mutation.HasAcronym(); ok {
		_spec.SetField(project.FieldHasAcronym, field.TypeString, value)
		_node.HasAcronym = value
	}
	if value, ok := pc.mutation.Created(); ok {
		_spec.SetField(project.FieldCreated, field.TypeTime, value)
		_node.Created = value
	}
	if value, ok := pc.mutation.Modified(); ok {
		_spec.SetField(project.FieldModified, field.TypeTime, value)
		_node.Modified = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Project.Create().
//		SetIdentifier(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectUpsert) {
//			SetIdentifier(v+v).
//		}).
//		Exec(ctx)
func (pc *ProjectCreate) OnConflict(opts ...sql.ConflictOption) *ProjectUpsertOne {
	pc.conflict = opts
	return &ProjectUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProjectCreate) OnConflictColumns(columns ...string) *ProjectUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProjectUpsertOne{
		create: pc,
	}
}

type (
	// ProjectUpsertOne is the builder for "upsert"-ing
	//  one Project node.
	ProjectUpsertOne struct {
		create *ProjectCreate
	}

	// ProjectUpsert is the "OnConflict" setter.
	ProjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetIdentifier sets the "identifier" field.
func (u *ProjectUpsert) SetIdentifier(v []schema.Identifier) *ProjectUpsert {
	u.Set(project.FieldIdentifier, v)
	return u
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateIdentifier() *ProjectUpsert {
	u.SetExcluded(project.FieldIdentifier)
	return u
}

// ClearIdentifier clears the value of the "identifier" field.
func (u *ProjectUpsert) ClearIdentifier() *ProjectUpsert {
	u.SetNull(project.FieldIdentifier)
	return u
}

// SetIsFundedBy sets the "is_funded_by" field.
func (u *ProjectUpsert) SetIsFundedBy(v schema.Grant) *ProjectUpsert {
	u.Set(project.FieldIsFundedBy, v)
	return u
}

// UpdateIsFundedBy sets the "is_funded_by" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateIsFundedBy() *ProjectUpsert {
	u.SetExcluded(project.FieldIsFundedBy)
	return u
}

// ClearIsFundedBy clears the value of the "is_funded_by" field.
func (u *ProjectUpsert) ClearIsFundedBy() *ProjectUpsert {
	u.SetNull(project.FieldIsFundedBy)
	return u
}

// SetName sets the "name" field.
func (u *ProjectUpsert) SetName(v string) *ProjectUpsert {
	u.Set(project.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateName() *ProjectUpsert {
	u.SetExcluded(project.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *ProjectUpsert) SetDescription(v string) *ProjectUpsert {
	u.Set(project.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDescription() *ProjectUpsert {
	u.SetExcluded(project.FieldDescription)
	return u
}

// SetFoundingDate sets the "founding_date" field.
func (u *ProjectUpsert) SetFoundingDate(v string) *ProjectUpsert {
	u.Set(project.FieldFoundingDate, v)
	return u
}

// UpdateFoundingDate sets the "founding_date" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateFoundingDate() *ProjectUpsert {
	u.SetExcluded(project.FieldFoundingDate)
	return u
}

// SetDissolutionDate sets the "dissolution_date" field.
func (u *ProjectUpsert) SetDissolutionDate(v string) *ProjectUpsert {
	u.Set(project.FieldDissolutionDate, v)
	return u
}

// UpdateDissolutionDate sets the "dissolution_date" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateDissolutionDate() *ProjectUpsert {
	u.SetExcluded(project.FieldDissolutionDate)
	return u
}

// SetHasAcronym sets the "has_acronym" field.
func (u *ProjectUpsert) SetHasAcronym(v string) *ProjectUpsert {
	u.Set(project.FieldHasAcronym, v)
	return u
}

// UpdateHasAcronym sets the "has_acronym" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateHasAcronym() *ProjectUpsert {
	u.SetExcluded(project.FieldHasAcronym)
	return u
}

// SetModified sets the "modified" field.
func (u *ProjectUpsert) SetModified(v time.Time) *ProjectUpsert {
	u.Set(project.FieldModified, v)
	return u
}

// UpdateModified sets the "modified" field to the value that was provided on create.
func (u *ProjectUpsert) UpdateModified() *ProjectUpsert {
	u.SetExcluded(project.FieldModified)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(project.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProjectUpsertOne) UpdateNewValues() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(project.FieldID)
		}
		if _, exists := u.create.mutation.Created(); exists {
			s.SetIgnore(project.FieldCreated)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProjectUpsertOne) Ignore() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectUpsertOne) DoNothing() *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectCreate.OnConflict
// documentation for more info.
func (u *ProjectUpsertOne) Update(set func(*ProjectUpsert)) *ProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetIdentifier sets the "identifier" field.
func (u *ProjectUpsertOne) SetIdentifier(v []schema.Identifier) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateIdentifier() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateIdentifier()
	})
}

// ClearIdentifier clears the value of the "identifier" field.
func (u *ProjectUpsertOne) ClearIdentifier() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearIdentifier()
	})
}

// SetIsFundedBy sets the "is_funded_by" field.
func (u *ProjectUpsertOne) SetIsFundedBy(v schema.Grant) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetIsFundedBy(v)
	})
}

// UpdateIsFundedBy sets the "is_funded_by" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateIsFundedBy() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateIsFundedBy()
	})
}

// ClearIsFundedBy clears the value of the "is_funded_by" field.
func (u *ProjectUpsertOne) ClearIsFundedBy() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearIsFundedBy()
	})
}

// SetName sets the "name" field.
func (u *ProjectUpsertOne) SetName(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateName() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ProjectUpsertOne) SetDescription(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDescription() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDescription()
	})
}

// SetFoundingDate sets the "founding_date" field.
func (u *ProjectUpsertOne) SetFoundingDate(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetFoundingDate(v)
	})
}

// UpdateFoundingDate sets the "founding_date" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateFoundingDate() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateFoundingDate()
	})
}

// SetDissolutionDate sets the "dissolution_date" field.
func (u *ProjectUpsertOne) SetDissolutionDate(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDissolutionDate(v)
	})
}

// UpdateDissolutionDate sets the "dissolution_date" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateDissolutionDate() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDissolutionDate()
	})
}

// SetHasAcronym sets the "has_acronym" field.
func (u *ProjectUpsertOne) SetHasAcronym(v string) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetHasAcronym(v)
	})
}

// UpdateHasAcronym sets the "has_acronym" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateHasAcronym() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateHasAcronym()
	})
}

// SetModified sets the "modified" field.
func (u *ProjectUpsertOne) SetModified(v time.Time) *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.SetModified(v)
	})
}

// UpdateModified sets the "modified" field to the value that was provided on create.
func (u *ProjectUpsertOne) UpdateModified() *ProjectUpsertOne {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateModified()
	})
}

// Exec executes the query.
func (u *ProjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProjectUpsertOne.ID is not supported by MySQL driver. Use ProjectUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectCreateBulk is the builder for creating many Project entities in bulk.
type ProjectCreateBulk struct {
	config
	builders []*ProjectCreate
	conflict []sql.ConflictOption
}

// Save creates the Project entities in the database.
func (pcb *ProjectCreateBulk) Save(ctx context.Context) ([]*Project, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Project, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProjectCreateBulk) SaveX(ctx context.Context) []*Project {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProjectCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Project.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProjectUpsert) {
//			SetIdentifier(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectUpsertBulk {
	pcb.conflict = opts
	return &ProjectUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProjectCreateBulk) OnConflictColumns(columns ...string) *ProjectUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProjectUpsertBulk{
		create: pcb,
	}
}

// ProjectUpsertBulk is the builder for "upsert"-ing
// a bulk of Project nodes.
type ProjectUpsertBulk struct {
	create *ProjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(project.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProjectUpsertBulk) UpdateNewValues() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(project.FieldID)
			}
			if _, exists := b.mutation.Created(); exists {
				s.SetIgnore(project.FieldCreated)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Project.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProjectUpsertBulk) Ignore() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectUpsertBulk) DoNothing() *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectUpsertBulk) Update(set func(*ProjectUpsert)) *ProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetIdentifier sets the "identifier" field.
func (u *ProjectUpsertBulk) SetIdentifier(v []schema.Identifier) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetIdentifier(v)
	})
}

// UpdateIdentifier sets the "identifier" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateIdentifier() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateIdentifier()
	})
}

// ClearIdentifier clears the value of the "identifier" field.
func (u *ProjectUpsertBulk) ClearIdentifier() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearIdentifier()
	})
}

// SetIsFundedBy sets the "is_funded_by" field.
func (u *ProjectUpsertBulk) SetIsFundedBy(v schema.Grant) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetIsFundedBy(v)
	})
}

// UpdateIsFundedBy sets the "is_funded_by" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateIsFundedBy() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateIsFundedBy()
	})
}

// ClearIsFundedBy clears the value of the "is_funded_by" field.
func (u *ProjectUpsertBulk) ClearIsFundedBy() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.ClearIsFundedBy()
	})
}

// SetName sets the "name" field.
func (u *ProjectUpsertBulk) SetName(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateName() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ProjectUpsertBulk) SetDescription(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDescription() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDescription()
	})
}

// SetFoundingDate sets the "founding_date" field.
func (u *ProjectUpsertBulk) SetFoundingDate(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetFoundingDate(v)
	})
}

// UpdateFoundingDate sets the "founding_date" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateFoundingDate() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateFoundingDate()
	})
}

// SetDissolutionDate sets the "dissolution_date" field.
func (u *ProjectUpsertBulk) SetDissolutionDate(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetDissolutionDate(v)
	})
}

// UpdateDissolutionDate sets the "dissolution_date" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateDissolutionDate() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateDissolutionDate()
	})
}

// SetHasAcronym sets the "has_acronym" field.
func (u *ProjectUpsertBulk) SetHasAcronym(v string) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetHasAcronym(v)
	})
}

// UpdateHasAcronym sets the "has_acronym" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateHasAcronym() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateHasAcronym()
	})
}

// SetModified sets the "modified" field.
func (u *ProjectUpsertBulk) SetModified(v time.Time) *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.SetModified(v)
	})
}

// UpdateModified sets the "modified" field to the value that was provided on create.
func (u *ProjectUpsertBulk) UpdateModified() *ProjectUpsertBulk {
	return u.Update(func(s *ProjectUpsert) {
		s.UpdateModified()
	})
}

// Exec executes the query.
func (u *ProjectUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
