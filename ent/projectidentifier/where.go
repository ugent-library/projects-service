// Code generated by ent, DO NOT EDIT.

package projectidentifier

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ugent-library/projects/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldLTE(FieldID, id))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(sql.FieldContainsFold(FieldExternalID, v))
}

// HasProjects applies the HasEdge predicate on the "projects" edge.
func HasProjects() predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectsTable, ProjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectsWith applies the HasEdge predicate on the "projects" edge with a given conditions (other predicates).
func HasProjectsWith(preds ...predicate.Project) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(func(s *sql.Selector) {
		step := newProjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectIdentifier) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectIdentifier) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectIdentifier) predicate.ProjectIdentifier {
	return predicate.ProjectIdentifier(func(s *sql.Selector) {
		p(s.Not())
	})
}
