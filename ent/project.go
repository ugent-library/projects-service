// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ugent-library/projects/ent/project"
	"github.com/ugent-library/projects/ent/projectidentifier"
	"github.com/ugent-library/projects/ent/schema"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProjectIdentifierID holds the value of the "project_identifier_id" field.
	ProjectIdentifierID int `json:"project_identifier_id,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier schema.Identifier `json:"identifier,omitempty"`
	// Name holds the value of the "name" field.
	Name schema.TranslatedString `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description schema.TranslatedString `json:"description,omitempty"`
	// FoundingDate holds the value of the "founding_date" field.
	FoundingDate string `json:"founding_date,omitempty"`
	// DissolutionDate holds the value of the "dissolution_date" field.
	DissolutionDate string `json:"dissolution_date,omitempty"`
	// Acronym holds the value of the "acronym" field.
	Acronym string `json:"acronym,omitempty"`
	// GrantID holds the value of the "grant_id" field.
	GrantID string `json:"grant_id,omitempty"`
	// FundingProgramme holds the value of the "funding_programme" field.
	FundingProgramme string `json:"funding_programme,omitempty"`
	// Deleted holds the value of the "deleted" field.
	Deleted bool `json:"deleted,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges        ProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// IdentifiedBy holds the value of the identifiedBy edge.
	IdentifiedBy *ProjectIdentifier `json:"identifiedBy,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IdentifiedByOrErr returns the IdentifiedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) IdentifiedByOrErr() (*ProjectIdentifier, error) {
	if e.loadedTypes[0] {
		if e.IdentifiedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: projectidentifier.Label}
		}
		return e.IdentifiedBy, nil
	}
	return nil, &NotLoadedError{edge: "identifiedBy"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldIdentifier, project.FieldName, project.FieldDescription:
			values[i] = new([]byte)
		case project.FieldDeleted:
			values[i] = new(sql.NullBool)
		case project.FieldID, project.FieldProjectIdentifierID:
			values[i] = new(sql.NullInt64)
		case project.FieldFoundingDate, project.FieldDissolutionDate, project.FieldAcronym, project.FieldGrantID, project.FieldFundingProgramme:
			values[i] = new(sql.NullString)
		case project.FieldCreatedAt, project.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case project.FieldProjectIdentifierID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field project_identifier_id", values[i])
			} else if value.Valid {
				pr.ProjectIdentifierID = int(value.Int64)
			}
		case project.FieldIdentifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Identifier); err != nil {
					return fmt.Errorf("unmarshal field identifier: %w", err)
				}
			}
		case project.FieldName:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Name); err != nil {
					return fmt.Errorf("unmarshal field name: %w", err)
				}
			}
		case project.FieldDescription:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Description); err != nil {
					return fmt.Errorf("unmarshal field description: %w", err)
				}
			}
		case project.FieldFoundingDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field founding_date", values[i])
			} else if value.Valid {
				pr.FoundingDate = value.String
			}
		case project.FieldDissolutionDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dissolution_date", values[i])
			} else if value.Valid {
				pr.DissolutionDate = value.String
			}
		case project.FieldAcronym:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field acronym", values[i])
			} else if value.Valid {
				pr.Acronym = value.String
			}
		case project.FieldGrantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field grant_id", values[i])
			} else if value.Valid {
				pr.GrantID = value.String
			}
		case project.FieldFundingProgramme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field funding_programme", values[i])
			} else if value.Valid {
				pr.FundingProgramme = value.String
			}
		case project.FieldDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				pr.Deleted = value.Bool
			}
		case project.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case project.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (pr *Project) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryIdentifiedBy queries the "identifiedBy" edge of the Project entity.
func (pr *Project) QueryIdentifiedBy() *ProjectIdentifierQuery {
	return NewProjectClient(pr.config).QueryIdentifiedBy(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("project_identifier_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProjectIdentifierID))
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(fmt.Sprintf("%v", pr.Identifier))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", pr.Name))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(fmt.Sprintf("%v", pr.Description))
	builder.WriteString(", ")
	builder.WriteString("founding_date=")
	builder.WriteString(pr.FoundingDate)
	builder.WriteString(", ")
	builder.WriteString("dissolution_date=")
	builder.WriteString(pr.DissolutionDate)
	builder.WriteString(", ")
	builder.WriteString("acronym=")
	builder.WriteString(pr.Acronym)
	builder.WriteString(", ")
	builder.WriteString("grant_id=")
	builder.WriteString(pr.GrantID)
	builder.WriteString(", ")
	builder.WriteString("funding_programme=")
	builder.WriteString(pr.FundingProgramme)
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", pr.Deleted))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project
