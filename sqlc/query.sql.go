// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	models "github.com/ugent-library/projects-service/models"
)

const betweenProjects = `-- name: BetweenProjects :many

SELECT pk,
    external_primary_identifier,
    external_identifiers,
    name,
    description,
    founding_date,
    dissolution_date,
    acronym,
    eu_grant_call,
    eu_funding_programme,
    created_at,
    updated_at
FROM projects
WHERE created_at >= $1 AND created_at <= $2
ORDER BY created_at ASC
`

type BetweenProjectsParams struct {
	CreatedAt   pgtype.Timestamptz
	CreatedAt_2 pgtype.Timestamptz
}

type BetweenProjectsRow struct {
	Pk                        int64
	ExternalPrimaryIdentifier string
	ExternalIdentifiers       models.ExternalIdentifiers
	Name                      models.TranslatedString
	Description               models.TranslatedString
	FoundingDate              pgtype.Text
	DissolutionDate           pgtype.Text
	Acronym                   models.Acronym
	EuGrantCall               pgtype.Text
	EuFundingProgramme        pgtype.Text
	CreatedAt                 pgtype.Timestamptz
	UpdatedAt                 pgtype.Timestamptz
}

func (q *Queries) BetweenProjects(ctx context.Context, arg BetweenProjectsParams) ([]BetweenProjectsRow, error) {
	rows, err := q.db.Query(ctx, betweenProjects, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BetweenProjectsRow
	for rows.Next() {
		var i BetweenProjectsRow
		if err := rows.Scan(
			&i.Pk,
			&i.ExternalPrimaryIdentifier,
			&i.ExternalIdentifiers,
			&i.Name,
			&i.Description,
			&i.FoundingDate,
			&i.DissolutionDate,
			&i.Acronym,
			&i.EuGrantCall,
			&i.EuFundingProgramme,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteProject = `-- name: DeleteProject :one
DELETE FROM projects
WHERE external_primary_identifier = $1
RETURNING pk
`

func (q *Queries) DeleteProject(ctx context.Context, externalPrimaryIdentifier string) (int64, error) {
	row := q.db.QueryRow(ctx, deleteProject, externalPrimaryIdentifier)
	var pk int64
	err := row.Scan(&pk)
	return pk, err
}

const eachProject = `-- name: EachProject :many

SELECT pk,
    external_primary_identifier,
    external_identifiers,
    name,
    description,
    founding_date,
    dissolution_date,
    acronym,
    eu_grant_call,
    eu_funding_programme,
    created_at,
    updated_at
FROM projects
ORDER BY pk ASC 
OFFSET $1
LIMIT $2
`

type EachProjectParams struct {
	Offset int32
	Limit  int32
}

type EachProjectRow struct {
	Pk                        int64
	ExternalPrimaryIdentifier string
	ExternalIdentifiers       models.ExternalIdentifiers
	Name                      models.TranslatedString
	Description               models.TranslatedString
	FoundingDate              pgtype.Text
	DissolutionDate           pgtype.Text
	Acronym                   models.Acronym
	EuGrantCall               pgtype.Text
	EuFundingProgramme        pgtype.Text
	CreatedAt                 pgtype.Timestamptz
	UpdatedAt                 pgtype.Timestamptz
}

func (q *Queries) EachProject(ctx context.Context, arg EachProjectParams) ([]EachProjectRow, error) {
	rows, err := q.db.Query(ctx, eachProject, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EachProjectRow
	for rows.Next() {
		var i EachProjectRow
		if err := rows.Scan(
			&i.Pk,
			&i.ExternalPrimaryIdentifier,
			&i.ExternalIdentifiers,
			&i.Name,
			&i.Description,
			&i.FoundingDate,
			&i.DissolutionDate,
			&i.Acronym,
			&i.EuGrantCall,
			&i.EuFundingProgramme,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProject = `-- name: GetProject :one
SELECT pk,
    external_primary_identifier,
    external_identifiers,
    name,
    description,
    founding_date,
    dissolution_date,
    acronym,
    eu_grant_call,
    eu_funding_programme,
    created_at,
    updated_at
FROM projects
WHERE external_primary_identifier = $1
LIMIT 1
`

type GetProjectRow struct {
	Pk                        int64
	ExternalPrimaryIdentifier string
	ExternalIdentifiers       models.ExternalIdentifiers
	Name                      models.TranslatedString
	Description               models.TranslatedString
	FoundingDate              pgtype.Text
	DissolutionDate           pgtype.Text
	Acronym                   models.Acronym
	EuGrantCall               pgtype.Text
	EuFundingProgramme        pgtype.Text
	CreatedAt                 pgtype.Timestamptz
	UpdatedAt                 pgtype.Timestamptz
}

func (q *Queries) GetProject(ctx context.Context, externalPrimaryIdentifier string) (GetProjectRow, error) {
	row := q.db.QueryRow(ctx, getProject, externalPrimaryIdentifier)
	var i GetProjectRow
	err := row.Scan(
		&i.Pk,
		&i.ExternalPrimaryIdentifier,
		&i.ExternalIdentifiers,
		&i.Name,
		&i.Description,
		&i.FoundingDate,
		&i.DissolutionDate,
		&i.Acronym,
		&i.EuGrantCall,
		&i.EuFundingProgramme,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const suggestProjects = `-- name: SuggestProjects :many

SELECT pk,
    external_primary_identifier,
    external_identifiers,
    name,
    description,
    founding_date,
    dissolution_date,
    acronym,
    eu_grant_call,
    eu_funding_programme,
    created_at,
    updated_at
FROM projects
WHERE ts @@ to_tsquery('usimple', $1)
LIMIT 20
`

type SuggestProjectsRow struct {
	Pk                        int64
	ExternalPrimaryIdentifier string
	ExternalIdentifiers       models.ExternalIdentifiers
	Name                      models.TranslatedString
	Description               models.TranslatedString
	FoundingDate              pgtype.Text
	DissolutionDate           pgtype.Text
	Acronym                   models.Acronym
	EuGrantCall               pgtype.Text
	EuFundingProgramme        pgtype.Text
	CreatedAt                 pgtype.Timestamptz
	UpdatedAt                 pgtype.Timestamptz
}

func (q *Queries) SuggestProjects(ctx context.Context, toTsquery string) ([]SuggestProjectsRow, error) {
	rows, err := q.db.Query(ctx, suggestProjects, toTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SuggestProjectsRow
	for rows.Next() {
		var i SuggestProjectsRow
		if err := rows.Scan(
			&i.Pk,
			&i.ExternalPrimaryIdentifier,
			&i.ExternalIdentifiers,
			&i.Name,
			&i.Description,
			&i.FoundingDate,
			&i.DissolutionDate,
			&i.Acronym,
			&i.EuGrantCall,
			&i.EuFundingProgramme,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertProject = `-- name: UpsertProject :exec
INSERT INTO projects(
        external_primary_identifier,
        external_identifiers,
        name,
        description,
        founding_date,
        dissolution_date,
        acronym,
        eu_grant_call,
        eu_funding_programme,
        created_at,
        updated_at
    )
VALUES(
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        current_timestamp,
        current_timestamp
    ) ON CONFLICT (external_primary_identifier) DO
UPDATE
SET external_identifiers = excluded.external_identifiers,
    name = excluded.name,
    description = excluded.description,
    founding_date = excluded.founding_date,
    dissolution_date = excluded.dissolution_date,
    acronym = excluded.acronym,
    eu_grant_call = excluded.eu_grant_call,
    eu_funding_programme = excluded.eu_funding_programme,
    created_at = projects.created_at,
    updated_at = current_timestamp
`

type UpsertProjectParams struct {
	ExternalPrimaryIdentifier string
	ExternalIdentifiers       models.ExternalIdentifiers
	Name                      models.TranslatedString
	Description               models.TranslatedString
	FoundingDate              pgtype.Text
	DissolutionDate           pgtype.Text
	Acronym                   models.Acronym
	EuGrantCall               pgtype.Text
	EuFundingProgramme        pgtype.Text
}

func (q *Queries) UpsertProject(ctx context.Context, arg UpsertProjectParams) error {
	_, err := q.db.Exec(ctx, upsertProject,
		arg.ExternalPrimaryIdentifier,
		arg.ExternalIdentifiers,
		arg.Name,
		arg.Description,
		arg.FoundingDate,
		arg.DissolutionDate,
		arg.Acronym,
		arg.EuGrantCall,
		arg.EuFundingProgramme,
	)
	return err
}
