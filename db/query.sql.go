// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/ugent-library/projects-service/models"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects(
    name,
    description,
    founding_date,
    dissolution_date,
    attributes
)
VAlUES($1, $2, $3, $4, $5)
RETURNING id
`

type CreateProjectParams struct {
	Name            []models.Translation
	Description     []models.Translation
	FoundingDate    pgtype.Text
	DissolutionDate pgtype.Text
	Attributes      []models.Attribute
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (int64, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.Name,
		arg.Description,
		arg.FoundingDate,
		arg.DissolutionDate,
		arg.Attributes,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createProjectIdentifier = `-- name: CreateProjectIdentifier :exec
INSERT INTO projects_identifiers(
    project_id,
    type,
    value
) VALUES ($1, $2, $3)
`

type CreateProjectIdentifierParams struct {
	ProjectID int64
	Type      string
	Value     string
}

func (q *Queries) CreateProjectIdentifier(ctx context.Context, arg CreateProjectIdentifierParams) error {
	_, err := q.db.Exec(ctx, createProjectIdentifier, arg.ProjectID, arg.Type, arg.Value)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const deleteProjectIdentifier = `-- name: DeleteProjectIdentifier :exec
DELETE FROM projects_identifiers
WHERE type = $1 AND value = $2
`

type DeleteProjectIdentifierParams struct {
	Type  string
	Value string
}

func (q *Queries) DeleteProjectIdentifier(ctx context.Context, arg DeleteProjectIdentifierParams) error {
	_, err := q.db.Exec(ctx, deleteProjectIdentifier, arg.Type, arg.Value)
	return err
}

const eachProject = `-- name: EachProject :many
SELECT p.id, p.name, p.description, p.founding_date, p.dissolution_date, p.attributes, p.created_at, p.updated_at, json_agg(json_build_object('type', pi.type, 'value', pi.value)) AS identifiers
FROM projects p
LEFT JOIN projects_identifiers pi ON p.id = pi.project_id
WHERE p.id > $1
GROUP BY p.id LIMIT $2
`

type EachProjectParams struct {
	ID    int64
	Limit int32
}

type EachProjectRow struct {
	ID              int64
	Name            []models.Translation
	Description     []models.Translation
	FoundingDate    pgtype.Text
	DissolutionDate pgtype.Text
	Attributes      []models.Attribute
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
	Identifiers     []byte
}

func (q *Queries) EachProject(ctx context.Context, arg EachProjectParams) ([]EachProjectRow, error) {
	rows, err := q.db.Query(ctx, eachProject, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EachProjectRow
	for rows.Next() {
		var i EachProjectRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.FoundingDate,
			&i.DissolutionDate,
			&i.Attributes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Identifiers,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProject = `-- name: GetProject :one
SELECT p.id, p.name, p.description, p.founding_date, p.dissolution_date, p.attributes, p.created_at, p.updated_at 
FROM projects p, projects_identifiers pi
WHERE p.id = pi.project_id AND pi.type = $1 AND pi.value = $2
`

type GetProjectParams struct {
	Type  string
	Value string
}

func (q *Queries) GetProject(ctx context.Context, arg GetProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, arg.Type, arg.Value)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.FoundingDate,
		&i.DissolutionDate,
		&i.Attributes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectIdentifiers = `-- name: GetProjectIdentifiers :many
SELECT project_id, type, value FROM projects_identifiers
WHERE project_id = $1
`

func (q *Queries) GetProjectIdentifiers(ctx context.Context, projectID int64) ([]ProjectsIdentifier, error) {
	rows, err := q.db.Query(ctx, getProjectIdentifiers, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectsIdentifier
	for rows.Next() {
		var i ProjectsIdentifier
		if err := rows.Scan(&i.ProjectID, &i.Type, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :exec
UPDATE projects SET (
    name,
    description,
    founding_date,
    dissolution_date,
    attributes,
    updated_at
) = ($2, $3, $4, $5, $6, CURRENT_TIMESTAMP)
WHERE id = $1
`

type UpdateProjectParams struct {
	ID              int64
	Name            []models.Translation
	Description     []models.Translation
	FoundingDate    pgtype.Text
	DissolutionDate pgtype.Text
	Attributes      []models.Attribute
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.Exec(ctx, updateProject,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.FoundingDate,
		arg.DissolutionDate,
		arg.Attributes,
	)
	return err
}
